- From Christopher J Madsen <madsen@computek.net>: 
 >> >   MAN3PODS => { 'Getopt/Mixed.pm' => '$(INST_MAN3DIR)/Getopt.Mixed.3' },
  > I did that because deleting that line caused MakeMaker to name the
  > manpage Getopt.Getopt.Mixed.3, which was obviously wrong.  I didn't
  > understand why it did that, so I took the easy solution.

- Following a request by Gerd Knops <gerti@BITart.com>, I tried to add
  AR_STATIC_ARGS, defaulting to "cr". NeXT computers should resolve:
     AR=libtool
     AR_STATIC_ARGS="-o"
  to allow for multiple architecture binaries.

  But this has to be supported by Configure first. There are probalbly
  too many hardcoded 'ar cr' calls.

- From Tim:

  >> Now let's wait which name Tim suggests: OTHERLDFILES or INST_DYNAMIC_DEP.
  >
  >Both. They both say different but valid things:
  >
  >INST_DYNAMIC_DEP can contain assorted makemaker _targets_ as well as files
  >and would appear in the $(INST_DYNAMIC): line but _not_ in the $(LD) line.
  >
! >OTHERLDFILES says 'other _files_ to be added to the $(LD) line' and
! >would appear in both places.
  >

- Don't let extensions write to PERL_SRC/lib anymore, build perl from
  the extensions found below ext, run 'make test' and 'make install'
  on each extension (giving room for letting them fail). Move some of
  the tests from t/lib/* to the libraries.

- ExtUtils::Config, another Config.pm, that may be added to by various
  extensions.

- chmod +x for EXE_FILES

- Add a FLAVOR variable that makes it easier to build debugging,
  embedded or multiplicity perls. Currently the easiest way to produce
  a debugging perl seems to be (after having built perl):

     P=/the/current/perl
     O=/some/place/for/the/current/perl     # eg /usr/local/bin/O_perl
     D=/the/place/for/the/debugging/perl    # eg /usr/local/bin/d_perl
     LIB=libperld.a
     make clobber
     ./Configure -D"archname=d_XYZ" -des    # invent your name here
     make perllib=$LIB
     make test perllib=$LIB
     mv $P $O
     make install perllib=$LIB
     cp $P $D
     cp $O $P

  It would be nice, if the Configure step could be dropped. Also nice,
  but maybe expensive, if 'make clobber' wouldn't be needed.

- Change libperl.a to something like libperl.so.NNN on systems with
  d_shrplib defined. Something like:

    if ($Config{'d_shrplib'}){
 	$att{LIBPERL_A} =
    ####the latest of <$Config{'shrpdir'}/libperl.$Config{$so}.*>
    }

- I'd like to run all the *.PL files with something like

    GOODPERL=$(GOODPERL) $(GOODPERL) foobar.PL

  That way you could replace $Config{scriptdir} with $ENV{GOODPERL}
  and always say, it's MakeMaker's fault, when something goes wrong :)

  But why GOODPERL and not PERL and not FULLPERL? PERL is quite often
  miniperl, and FULLPERL is quite often a temporary ./perl. Sigh. I
  don't really know, if this causes problems.

- Watch what happens to the packages ExtUtils::MakeMaker, MM, MM_Unix,
  etc. during the Makefile.PL run. (Important for security aspects)

- Internal attribute NEEDS_TESTING, so a parent Makefile doesn't 'cd
  dir && make test' if there are no tests available.

- Add a C<html:> target when there has been found a general solution to
  installing html files.

- From Tim:
  > make ci does not check the return status of the commands.
  > It should probably be an MMTools function.

  > Maybe mani_do(..., "cmd %s") and mani_doall(..., "cmd %s") would be
  > handy. Both would check the return status of the command. mani_do would
  > stop at the first failure and return that status. mani_doall would
  > carry on regardless and return a count of the number of failures.

  > The mani_do* functions would allow a 'make diff =v4_22' to be
  > implemented very easily.

